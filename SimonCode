#include <Wire.h>
#include <Servo.h>

#define triggerPinLeft 11
#define echoPinLeft 2

#define triggerPinFront 13
#define echoPinFront 3

const int liftFanPin = 5;
const int thrustFanPin = 6;

const int servoPin = 9;
Servo myServo;

const int threshold_front = 40;
const int threshold_side = 31;

int value_front = 0;
int value_side = 0;

//For IMU
const int MPU = 0x68; // MPU6050 I2C address
float AccX, AccY, AccZ;
float GyroX, GyroY, GyroZ;
float accAngleX, accAngleY, gyroAngleX, gyroAngleY, gyroAngleZ;
float roll, pitch, yaw;
float AccErrorX, AccErrorY, GyroErrorX, GyroErrorY, GyroErrorZ;
float elapsedTime, currentTime, previousTime;
int c = 0;

//For Sensors
float getDistance(int triggerPin, int echoPin);

//Stabilize and IMU getAngle
float getAngle();
void stabilize();

//Setup Function
void setup() {

  Serial.begin(9600);
 
  pinMode(triggerPinLeft, OUTPUT);
  pinMode(echoPinLeft, INPUT);

  pinMode(triggerPinFront, OUTPUT);
  pinMode(echoPinFront, INPUT);

  digitalWrite(liftFanPin, LOW);
  digitalWrite(thrustFanPin, LOW);

  myServo.attach(servoPin);
  myServo.write(90);

  //Section for IMU. The check error can or cant be used
  Wire.begin();                      // Initialize comunication
  Wire.beginTransmission(MPU);       // Start communication with MPU6050 // MPU=0x68
  Wire.write(0x6B);                  // Talk to the register 6B
  Wire.write(0x00);                  // Make reset - place a 0 into the 6B register
  Wire.endTransmission(true);        //end the transmission

  calculate_IMU_error();

  delay(2000); // Wait for sensors to settle 
}


void loop() {
  
  digitalWrite(liftFanPin, HIGH);
  analogWrite(thrustFanPin,185); // Set the thrust fan speed to halfway

  while(true) { // keep stabilizing until hovecraft is turned off 
    stabilize(); // Call the stabilize function ///// SHOULD BE IN A WHILE LOOP TO KEEP STABILIZING CAUSE DOING IT ONCE 
    float Amar = getAngle(); // Amar is yaw ? yes
    //Serial.println(Amar);
    value_front = getDistance(triggerPinFront, echoPinFront);
    value_side = getDistance(triggerPinLeft, echoPinLeft);

    if (value_front < threshold_front) {
      digitalWrite(liftFanPin, HI);
      analogWrite(thrustFanPin, 185);
      delay(2000);
      value_side = getDistance(triggerPinLeft, echoPinLeft);
      // Obstacle detected, avoid it
      if (value_side > threshold_side) { // turn left
        digitalWrite(liftFanPin, HIGH);
        analogWrite(thrustFanPin, 185);
        float Example= 0.0;
        float Trust = getAngle();
        while ( Example < -80 ){
          myServo.write(10);
          Amar = getAngle(); 
          Example = Amar - Trust;
        }
      myServo.write(90); // Keep servo straight (neutral)
      }
      else if (value_side < threshold_side){ // turn right
        digitalWrite(liftFanPin, HIGH);
        analogWrite(thrustFanPin, 185);
        float Example= 0.0;
        float Trust = getAngle();
        while ( Example < 80 ){
          myServo.write(170);
          Amar = getAngle(); 
          Example = Amar - Trust;

           
        }
      myServo.write(90); // Keep servo straight (neutral)
      //stabilize();
      }
    }  

    // No obstacle detected, keep going straight 
    else {
      myServo.write(90);
      //stabilize();
    }
  
  }


}


float getDistance(int triggerPin, int echoPin) {
  long duration, distance;

  digitalWrite(triggerPin, LOW);
  delayMicroseconds(2);
  digitalWrite(triggerPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(triggerPin, LOW);

  duration = pulseIn(echoPin, HIGH);
  distance = (duration / 2) * 0.0343;
  return distance;
}


void stabilize() {

  if(getAngle() > -50 && getAngle()< 50){
    float Gabrielle = 89 - getAngle();
    //Serial.println(Gabrielle);
    int Nadim = Gabrielle;
    myServo.write(Nadim);
    delay(100);
  }
  else if ( getAngle() > 130){
    float Gabrielle = 90  + (180-getAngle());
    //Serial.println(Gabrielle);
    int Nadim = Gabrielle;
    myServo.write(Nadim);
    delay(100);
  }
  else if ( getAngle() < -130){
    float Gabrielle = 90 - (180 + getAngle());
    //Serial.println(Gabrielle);
    int Nadim = Gabrielle;
    myServo.write(Nadim);
    delay(100); // delay by few milliseconds to avoid overwhelming the servo motor with too many commands too quicky 
  }
}

float getAngle() {
  // === Read acceleromter data === //
  Wire.beginTransmission(MPU);
  Wire.write(0x3B); // Start with register 0x3B (ACCEL_XOUT_H)
  Wire.endTransmission(false);
  Wire.requestFrom(MPU, 6, true); // Read 6 registers total, each axis value is stored in 2 registers
  //For a range of +-2g, we need to divide the raw values by 16384, according to the datasheet
  AccX = (Wire.read() << 8 | Wire.read()) / 16384.0; // X-axis value
  AccY = (Wire.read() << 8 | Wire.read()) / 16384.0; // Y-axis value
  AccZ = (Wire.read() << 8 | Wire.read()) / 16384.0; // Z-axis value
  // Calculating Roll and Pitch from the accelerometer data
  accAngleX = (atan(AccY / sqrt(pow(AccX, 2) + pow(AccZ, 2))) * 180 / PI) - 0.58; // AccErrorX ~(0.58) See the calculate_IMU_error()custom function for more details
  accAngleY = (atan(-1 * AccX / sqrt(pow(AccY, 2) + pow(AccZ, 2))) * 180 / PI) + 1.58; // AccErrorY ~(-1.58)
  // === Read gyroscope data === //
  previousTime = currentTime;        // Previous time is stored before the actual time read
  currentTime = millis();            // Current time actual time read
  elapsedTime = (currentTime - previousTime) / 1000; // Divide by 1000 to get seconds
  Wire.beginTransmission(MPU);
  Wire.write(0x43); // Gyro data first register address 0x43
  Wire.endTransmission(false);
  Wire.requestFrom(MPU, 6, true); // Read 4 registers total, each axis value is stored in 2 registers
  GyroX = (Wire.read() << 8 | Wire.read()) / 131.0; // For a 250deg/s range we have to divide first the raw value by 131.0, according to the datasheet
  GyroY = (Wire.read() << 8 | Wire.read()) / 131.0;
  GyroZ = (Wire.read() << 8 | Wire.read()) / 131.0;
  // Correct the outputs with the calculated error values
  GyroX = GyroX + 0.56; // GyroErrorX ~(-0.56)
  GyroY = GyroY - 2; // GyroErrorY ~(2)
  GyroZ = GyroZ + 0.79; // GyroErrorZ ~ (-0.8)
  //Serial.println(yaw);
  // Currently the raw values are in degrees per seconds, deg/s, so we need to multiply by sendonds (s) to get the angle in degrees
  gyroAngleX = gyroAngleX + GyroX * elapsedTime; // deg/s * s = deg
  gyroAngleY = gyroAngleY + GyroY * elapsedTime;
  yaw =  yaw + (2.5-GyroZ) * elapsedTime;
  //Serial.println(elapsedTime);
  // Complementary filter - combine acceleromter and gyro angle values
  roll = 0.96 * gyroAngleX + 0.04 * accAngleX;
  pitch = 0.96 * gyroAngleY + 0.04 * accAngleY;

  return yaw;
  
} 

void calculate_IMU_error() {
  // We can call this funtion in the setup section to calculate the accelerometer and gyro data error. From here we will get the error values used in the above equations printed on the Serial Monitor.
  // Note that we should place the IMU flat in order to get the proper values, so that we then can the correct values
  // Read accelerometer values 200 times
  while (c < 200) {
    Wire.beginTransmission(MPU);
    Wire.write(0x3B);
    Wire.endTransmission(false);
    Wire.requestFrom(MPU, 6, true);
    AccX = (Wire.read() << 8 | Wire.read()) / 16384.0 ;
    AccY = (Wire.read() << 8 | Wire.read()) / 16384.0 ;
    AccZ = (Wire.read() << 8 | Wire.read()) / 16384.0 ;
    // Sum all readings
    AccErrorX = AccErrorX + ((atan((AccY) / sqrt(pow((AccX), 2) + pow((AccZ), 2))) * 180 / PI));
    AccErrorY = AccErrorY + ((atan(-1 * (AccX) / sqrt(pow((AccY), 2) + pow((AccZ), 2))) * 180 / PI));
    c++;
  }
  //Divide the sum by 200 to get the error value
  AccErrorX = AccErrorX / 200;
  AccErrorY = AccErrorY / 200;
  c = 0;
  // Read gyro values 200 times
  while (c < 200) {
    Wire.beginTransmission(MPU);
    Wire.write(0x43);
    Wire.endTransmission(false);
    Wire.requestFrom(MPU, 6, true);
    GyroX = Wire.read() << 8 | Wire.read();
    GyroY = Wire.read() << 8 | Wire.read();
    GyroZ = Wire.read() << 8 | Wire.read();
    // Sum all readings
    GyroErrorX = GyroErrorX + (GyroX / 131.0);
    GyroErrorY = GyroErrorY + (GyroY / 131.0);
    GyroErrorZ = GyroErrorZ + (GyroZ / 131.0);
    c++;
  }
  //Divide the sum by 200 to get the error value
  GyroErrorX = GyroErrorX / 200;
  GyroErrorY = GyroErrorY / 200;
  GyroErrorZ = GyroErrorZ / 200;

}
